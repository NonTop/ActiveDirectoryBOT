from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from bot.services import database, ldap_service, email_service
from bot.handlers.states import AuthState
import random
import string

async def generate_confirmation_code():
    return ''.join(random.choices(string.digits, k=6))

async def cmd_start(message: types.Message, state: FSMContext, config: dict):
    user = await database.get_user_by_tg_id(message.from_user.id)
    if user:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîë –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å")]],
            resize_keyboard=True
        )
        await message.answer("–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã. –î–æ—Å—Ç—É–ø–µ–Ω —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è:", reply_markup=keyboard)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à AD-–ª–æ–≥–∏–Ω:")
        await state.set_state(AuthState.awaiting_login)

async def process_login(message: types.Message, state: FSMContext, config: dict):
    ad_login = message.text.strip().lower()
    existing_user = await database.get_user_by_login(ad_login)

    if existing_user:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        response = ("–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É."
                    if existing_user[0] == message.from_user.id
                    else "‚ö†Ô∏è –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É!")
        await message.answer(response, reply_markup=keyboard)
        await state.clear()
        return

    found, email = await ldap_service.check_ad_login(ad_login, config)

    if not found or not email:
        await message.answer("–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AD. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    code = await generate_confirmation_code()
    if await email_service.send_confirmation_email(email, code):
        await state.update_data(ad_login=ad_login, email=email, code=code)
        await message.answer(f"‚úâÔ∏è –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")
        await state.set_state(AuthState.awaiting_code)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text.strip() != data["code"]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    success = await database.save_user(
        message.from_user.id,
        data["ad_login"],
        data["email"]
    )

    if success:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîë –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å")]],
            resize_keyboard=True
        )
        await message.answer("‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!", reply_markup=keyboard)
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!")

    await state.clear()

async def retry_login(message: types.Message, state: FSMContext, config: dict):
    await cmd_start(message, state, config)